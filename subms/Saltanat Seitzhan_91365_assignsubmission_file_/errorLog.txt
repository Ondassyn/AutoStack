
{Copying}: ...

{Compiler}: ...
{Compiler}: SUCCESS

{Test}: ...

{Valgrind}: ...
==> ==19348== Memcheck, a memory error detector
==> ==19348== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==> ==19348== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==> ==19348== Command: /home/ondassyn/CSCI152/AutoStack/subms/Saltanat\ Seitzhan_91365_assignsubmission_file_/main
==> ==19348== 
==> ==19348== Conditional jump or move depends on uninitialised value(s)
==> ==19348==    at 0x404B7E: stack::stack(std::initializer_list<int>) (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348==    by 0x4013D2: main (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348== 
==> ==19348== Use of uninitialised value of size 8
==> ==19348==    at 0x404C82: stack::stack(std::initializer_list<int>) (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348==    by 0x4013D2: main (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348== 
==> ==19348== Invalid write of size 4
==> ==19348==    at 0x404C82: stack::stack(std::initializer_list<int>) (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348==    by 0x4013D2: main (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348==  Address 0x3 is not stack'd, malloc'd or (recently) free'd
==> ==19348== 
==> ==19348== 
==> ==19348== Process terminating with default action of signal 11 (SIGSEGV)
==> ==19348==  Access not within mapped region at address 0x3
==> ==19348==    at 0x404C82: stack::stack(std::initializer_list<int>) (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348==    by 0x4013D2: main (in /home/ondassyn/CSCI152/AutoStack/subms/Saltanat Seitzhan_91365_assignsubmission_file_/main)
==> ==19348==  If you believe this happened as a result of a stack
==> ==19348==  overflow in your program's main thread (unlikely but
==> ==19348==  possible), you can try to increase the size of the
==> ==19348==  main thread stack using the --main-stacksize= flag.
==> ==19348==  The main thread stack size used in this run was 8388608.
==> ==19348== 
==> ==19348== HEAP SUMMARY:
==> ==19348==     in use at exit: 73,339 bytes in 5 blocks
==> ==19348==   total heap usage: 9 allocs, 4 frees, 77,638 bytes allocated
==> ==19348== 
==> ==19348== LEAK SUMMARY:
==> ==19348==    definitely lost: 0 bytes in 0 blocks
==> ==19348==    indirectly lost: 0 bytes in 0 blocks
==> ==19348==      possibly lost: 0 bytes in 0 blocks
==> ==19348==    still reachable: 73,339 bytes in 5 blocks
==> ==19348==         suppressed: 0 bytes in 0 blocks
==> ==19348== Rerun with --leak-check=full to see details of leaked memory
==> ==19348== 
==> ==19348== For counts of detected and suppressed errors, rerun with: -v
==> ==19348== Use --track-origins=yes to see where uninitialised values come from
==> ==19348== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)
